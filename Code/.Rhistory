b
unique(red.tax4)
red.tax4[[1]]
red.tax4[[1000]]
unique(red.tax4)[[1]]
unique(red.tax4)[1
]
unique(red.tax4)
unique(red.tax4)[[1]][1]
unique(red.tax4)[[1000]][1]
unique(red.tax4)[[10]][1]
unique(red.tax4)[[2]][1]
unique(red.tax4)[[1]][1]
unique(red.tax4)[[-1]][1]
unique(red.tax4)[[100]][1]
unique(red.tax4)[[100]]
tax4_lunlist = unlist(red.tax4)
View(tax4_lunlist)
length(tax4_lunlist)
library(tidyr)
library(dplyr)
test.list <- tax4_lunlist[1:10]
test.list
json.convert.test <- sapply(tax4_lunlist, jsonlite::fromJSON(tax4_lunlist))
json.convert.test <- sapply(test.list, jsonlite::fromJSON())
json.convert.test <- sapply(test.list, jsonlite::fromJSON(test.list))
a <- jsonlite::fromJSON(rl_search_(name = red$scientificName[1], key = my.key))
b <- rl_search_(name = red$scientificName[1], key = my.key)
c <-jsonlite::fromJSON(b)
c <-as.data.frame(jsonlite::fromJSON(b))
json.convert.test <- as.data.frame(sapply(test.list, jsonlite::fromJSON(test.list)))
test.list[1]
c <-as.data.frame(jsonlite::fromJSON(b,b))
bb <- cbind(b,b)
View(bb)
cc <-as.data.frame(jsonlite::fromJSON(bb))
?tidyjson
install.packages("tidyjson")
?tidyjson
test2 <- tidyjson::read_json(test.list, format = "json1")
test2 <- tidyjson::read_json(test.list, format = "jsonl")
test2 <- tidyjson::read_json(test.list, format = "jsonl")
ee <- jsonlite::fromJSON(sprintf("[%s]", paste(readlines(test.list), collapse = ",")))
ee <- jsonlite::fromJSON(sprintf("[%s]", paste(readLines(test.list), collapse = ",")))
ee <- jsonlite::fromJSON(sprintf("[%s]", paste(readLines(test.list), collapse = ",")))
ee <- jsonlite::fromJSON(sprintf("[%s]", paste(readLines("../Data/redtaxa4.Rdata"), collapse = ",")))
ee <- jsonlite::fromJSON(sprintf("[%s]", paste(readLines(test.list), collapse = ",")))
test3 <- red.tax4
ee <- jsonlite::fromJSON(sprintf("[%s]", paste(readLines(test3), collapse = ",")))
load("../Data/redtaxa3.Rdata")
# get required packages
library(rredlist)
library(dplyr)
library(jsonlite)
my.key <- c("30c68b19cedcc7f1cee81aa9b07e1cd235c49d9af8c184d76998b05e59a77c22") # this is my key <3
setwd("~/Documents/ResearchProject/Code/")
load("../Data/red.csv")
load.csv("../Data/red.csv")
red <- read.csv("../Data/red.csv")
red <- read.csv("../Data/red.csv", stringsAsFactors = F)
taxanomic.data <- data.frame()
taxanomic.data <- data.frame()
i = 1
taxanomic.data[i] <- rl_search(name = red$scientificName[i], key = my.key, parse = F)
taxanomic.data <- list()
taxanomic.data[[i]] <- rl_search(name = red$scientificName[i], key = my.key, parse = F)
i = 2
taxanomic.data[[i]] <- rl_search(name = red$scientificName[i], key = my.key, parse = F)
View(taxanomic.data)
taxanomic.data[[2]]
save(taxanomic.data, file = "../Data/APIScriptOutput.R")
load("../Data/APIScriptOutput.R")
cheese <- load("../Data/APIScriptOutput.R")
load("../Data/APIScriptOutput.R")
save(taxanomic.data, file = "../Data/APIScriptOutput.Rdata")
load("../Data/APIScriptOutput.R")
fish <- load("../Data/APIScriptOutput.R")
View(taxanomic.data)
View(taxanomic.data)
rm(taxanomic.data)
load("../Data/APIScriptOutput.R")
load("../Data/APIScriptOutput.Rdata")
# get required packages
library(rredlist)
library(dplyr)
library(jsonlite)
my.key <- c("30c68b19cedcc7f1cee81aa9b07e1cd235c49d9af8c184d76998b05e59a77c22") # this is my key <3
setwd("~/Documents/ResearchProject/Code/")
red <- read.csv("../Data/red.csv", stringsAsFactors = F)
i = 2
taxanomic.data[[i]] <- jsonlite::fromJSON(rl_search_(name = red$scientificName[i], key = my.key, parse = F))
print(i)
graphics.off()
rm(list = ls())
setwd("~/Documents/ResearchProject/Code/")
library(fishtree)
library(rfishbase)
library(picante)
library(geiger)
library(ape) # analyses of phylogenetics and evolution
library(dplyr)
library(tidyr)
library(ggplot2)
library(rredlist)
#source("ExplorationAllData.R")
source("FunctionsforComparisons.R")
#WoRMS: worms$scientificName
worms <- read.csv(file= "../Data/Full_Actiopterygii_WoRMS_data.csv",sep = ",",
fill = T, stringsAsFactors = F)
#FishBase: fb$ScientificName
fb <- read.csv(file = "../Data/fb.csv", header = T, sep = ",", stringsAsFactors = F, fill = T)
fb <- fb[,-1]
tree <- read.csv(file = "../Data/tree.csv",
header = T, sep = ",", stringsAsFactors = F, fill = T)
tree <- as.data.frame(tree[,-1])
colnames(tree) <- c("ScientificName")
red <- read.csv(file = "../Data/red.csv",
header = T, sep = ",", stringsAsFactors = F, fill = T)
red <- as.data.frame(red[,-1])
# quick check to see how many species match for the two data lists
RnW <- intersect(red$scientificName, worms$scientificName)  # worms has fewest matches, despite having largest database!
length(RnW) # 9580
WormsandRed <- data.frame()
WormsandRed <- RedOverlap(RedName = red$scientificName, RedCategory = red$redlistCategory, RedID = red$assessmentId,
DBName = worms$scientificName, counter = 0, dataframe = WormsandRed)
WormsandRed <- AddFam(DF1= WormsandRed, DFName = worms$scientificName, DFOrder = worms$order, DFFam = worms$family)
RednotWorms <- data.frame()
RednotWorms <- RedOnly(RedName = red$scientificName, RedCategory = red$redlistCategory, RedID = red$assessmentId,
DBName = worms$scientificName, counter = 0, dataframe = RednotWorms)
length(RednotWorms$V1) # 8375
##### what is in WoRMs, but not the RedList?
WormsnotRed <- data.frame()
WormsnotRed <-NotRed(RedName = red$scientificName, DBName = worms$scientificName,
DBOrder = worms$order, DBFam = worms$family, counter = 0, dataframe = WormsnotRed)
length(WormsnotRed$V1) #  to check how many entries there are  #36359
length(worms$taxonID) - (length(WormsandRed$V1) + length(WormsnotRed$V2)) # MISSING 39 SPECIES - WHYYYY. in the WnR file.
length(unique(worms$scientificNameID)) - length(worms$scientificNameID)
##################################
length(red$scientificName) - (length(RednotWorms$V1) + length(WormsandRed$V1)) # this list works
FBnR <- intersect(red$scientificName, fb$ScientificName)
length(FBnR) # 16584 species - decent!
FBandRed <- data.frame()
FBandRed <- RedOverlap(RedName = red$scientificName, RedCategory = red$redlistCategory,
RedID = red$assessmentId, DBName = fb$ScientificName, counter = 0, dataframe = FBandRed)
colnames <- c("ScientificName", "RedStatus", "RedID", "Order", "Family")
colnames(FBandRed) <-colnames
### add the family data
FBandRed <- AddFam(DF1 = FBandRed, DFName = fb$ScientificName, DFOrder = fb$Order, DFFam = fb$Family)
length(FBandRed$V1) # 16548
#and column names
colnames <- c("ScientificName", "RedStatus", "RedID", "Order", "Family")
colnames(FBandRed) <-colnames
RednotFB <- data.frame()
RednotFB <- RedOnly(RedName = red$scientificName, RedCategory = red$redlistCategory, RedID = red$assessmentId,
DBName = fb$ScientificName, counter = 0, dataframe = RednotFB   )
length(RednotFB$V1) # 1407
FBnotRed <- data.frame()
FBnotRed <- NotRed(RedName = red$scientificName, DBName = fb$ScientificName, DBOrder = fb$Order,
DBFam = fb$Family, counter = 0, dataframe = FBnotRed)
length(FBnotRed$V1) # 15211
length(red$assessmentId) - (length(FBandRed$V1) + length(RednotFB$V1)) # 0 - all checks out!
length(fb$ScientificName) - (length(FBandRed$V1) + length(FBnotRed$V1)) # 0 - also checks out!
length(red$assessmentId) - (length(FBandRed$V1) + length(RednotFB$V1)) # 0 - all checks out!
length(red$assessmentId) - (length(FBandRed$ScientificName) + length(RednotFB$V1)) # 0 - all checks out!
length(fb$ScientificName) - (length(FBandRed$ScientificName) + length(FBnotRed$V1)) # 0 - also checks out!
tree <- as.data.frame(tree)
tree[,1] <- as.character(tree[,1])
tree[,2] <- 0
tree[,3] <- 0
TnR <- intersect(tree$ScientificName, red$scientificName)
length(TnR) # 16386
TreeandRed <- data.frame()
TreeandRed <- RedOverlap(RedName = red$scientificName, RedCategory = red$redlistCategory,
RedID = red$assessmentId, DBName = tree$ScientificName, counter = 0, dataframe = TreeandRed)
length(TreeandRed$V1) # 16386 - checks out with the intersect above :)
RednotTree <- data.frame()
RednotTree <- RedOnly(RedName = red$scientificName, RedCategory = red$redlistCategory, RedID = red$assessmentId,
DBName = tree$ScientificName, counter = 0, dataframe = RednotTree   )
length(RednotTree$V1) # 1569 (before came up as 1407 - interesting!)
## and Tree not red
TreenotRed <- data.frame()
TreenotRed <- NotRed(RedName = red$scientificName, DBName = tree$ScientificName, DBOrder = tree$V2,
DBFam = tree$V2, counter = 0, dataframe = TreenotRed)
length(TreenotRed$V1) # 15130
length(red$assessmentId) - (length(TreeandRed$V1) + length(RednotTree$V1)) # 0 - all checks out!
length(tree$ScientificName) - (length(TreeandRed$V1) + length(TreenotRed$V1)) # 0 - also checks out!
RedTreeandWorms.intersect <- intersect(TreeandRed$V1, WormsandRed$V1)
length(RedTreeandWorms.intersect) # 9173
length(RednotFB$V1) # 1407
fbandred.familytable <- table(FBandRed$Family)
view(fbandred.familytable)
head(fbandred.familytable)
fbandred.familytable <- table(FBandRed$Family)
head(fbandred.familytable)
fbandred.familytable <- as.data.frame(FTdata.famtable)
fbandred.familytable <- as.data.frame(fbandred.familytable)
FBRT <- arrange(fbandred.familytable, Freq)
tail(FT2, 10)
tail(FBRT, 10)
fbandred.statustable <- table(FBandRed$RedStatus)
fbandred.statustable
fbandred.statustable <- as.data.frame(fbandred.statustable)
fbandred.statustable
head(FBandRed)
FBandRed[,6] <- NULL
head(FBandRed)
FBandRed[,6] <- 0
head(FBandRed)
colnames(FBandRed[,6]) <- c("endangered")
conserv.status
categories <- unique(red$redlistCategory) # this is a list of all of these 11 categories
conserv.cols <- c("Category", "#species", "endangered", "%oftotal")
conserv.status <- matrix(nrow = 11, ncol = 4)
colnames(conserv.status) <- conserv.cols
conserv.status[,1] <- categories
conserv.status[,2] <- as.numeric(0)
y <- c("Y")
n <- c("N")
conserv.status[,3] <- c(y, n, y, n, y, y, y, n, n, n, n)
conserv.status
fbandred.familytable <- table(FBandRed$Family)
head(fbandred.familytable)
tail(FBRT, 10)
for (x in 1:length(FBandRed$RedStatus)) {
if (FBandRed$RedStatus[x] == "Extinct" | FBandRed$RedStatus[x] == "Extinct in the Wild"
| FBandRed$RedStatus[x] == "Endangered" | FBandRed$RedStatus[x] =="Critically Endangered" |
FBandRed$RedStatus[x] == "Vulnerable" ) {
FBandRed$V11[x] <- c("y")
}
}
for (x in 1:length(FBandRed$RedStatus)) {
if (FBandRed$RedStatus[x] == "Extinct" | FBandRed$RedStatus[x] == "Extinct in the Wild"
| FBandRed$RedStatus[x] == "Endangered" | FBandRed$RedStatus[x] =="Critically Endangered" |
FBandRed$RedStatus[x] == "Vulnerable" ) {
FBandRed$V6[x] <- c("y")
}
}
FBandRed <- FBandRed[,-7]
fbandred.familytable <- table(FBandRed$Family)
head(fbandred.familytable)
fbandred.familytable <- as.data.frame(fbandred.familytable)
for (x in 1:length(fbandred.familytable)) {
temp <- subset(FBandRed, FBandRed$Family == fbandred.familytable$Var1[x])
temp2 <- subset(temp, temp$V6 == "y")
temp.endangered.count <- length(temp2$V11)
fbandred.familytable[x,3] <- temp.endangered.count
}
View(fbandred.familytable)
for (x in 1:length(fbandred.familytable$Var1)) {
temp <- subset(FBandRed, FBandRed$Family == fbandred.familytable$Var1[x])
temp2 <- subset(temp, temp$V6 == "y")
temp.endangered.count <- length(temp2$V11)
fbandred.familytable[x,3] <- temp.endangered.count
}
fbandred.familytable[,1] <- as.character(fbandred.familytable[,1])
for (x in 1:length(fbandred.familytable$Var1)) {
temp <- subset(FBandRed, FBandRed$Family == fbandred.familytable$Var1[x])
temp2 <- subset(temp, temp$V6 == "y")
temp.endangered.count <- length(temp2$V11)
fbandred.familytable[x,3] <- temp.endangered.count
}
x <- 1
temp <- subset(FBandRed, FBandRed$Family == fbandred.familytable$Var1[x])
temp2 <- subset(temp, temp$V6 == "y")
temp.endangered.count <- length(temp2$V11)
temp.endangered.count <- as.numeric(length(temp2$V11))
fbandred.familytable[x,3] <- temp.endangered.count
View(fbandred.familytable)
View(FBandRed)
for (x in 1:length(fbandred.familytable$Var1)) {
x <- 1
temp <- subset(FBandRed, FBandRed$Family == fbandred.familytable$Var1[x])
temp2 <- subset(temp, temp$V6 == "y")
temp.endangered.count <- as.numeric(length(temp2$ScientificName))
fbandred.familytable[x,3] <- temp.endangered.count
}
View(fbandred.familytable)
for (x in 1:length(fbandred.familytable$Var1)) {
temp <- subset(FBandRed, FBandRed$Family == fbandred.familytable$Var1[x])
temp2 <- subset(temp, temp$V6 == "y")
temp.endangered.count <- as.numeric(length(temp2$ScientificName))
fbandred.familytable[x,3] <- temp.endangered.count
}
View(fbandred.familytable)
load("../Data/APIScriptOutput.Rdata")
red <- read.csv("../Data/red.csv", stringsAsFactors = F)
source('~/Documents/ResearchProject/Code/RedListAPIScript.R')
head(worms)
worms <- worms[,-1]
usefulcols <- c(6,14,15,16)
worms <- worms[,usefulcols]
head(worms)
length(worms$scientificName)
length(unique(worms$scientificName))
worms.data <- read.csv(file = "../Data/Full_Actiopterygii_WoRMS_data.csv")
head(worms.data)
worms.data <- worms.data[,-1]
head(worms.data)
View(worms.data)
View(worms.data)
worms.data <- read.csv(file = "../Data/Full_Actiopterygii_WoRMS_data.csv", header = F)
View(worms.data)
View(worms.data)
colnames <- as.vector(worms.data(1,))
colnames <- as.vector(worms.data[1,])
colnames(worms.data) <- colnames
colnames <- as.character(worms.data[1,])
colnames(worms.data) <- colnames
worms.data <- read.csv(file = "../Data/Full_Actiopterygii_WoRMS_data.csv", header = F, stringsAsFactors = F)
worms.data <- read.csv(file = "../Data/Full_Actiopterygii_WoRMS_data.csv", stringsAsFactors = F)
usefulcols <- c(7, 8, 15,16,17,18,19,20,24)
worms.use <- worms.data[,usefulcols]
View(worms.use)
View(worms.use)
worms.accepted <- subset(worms.use, worms.use$taxonomicStatus=="accepted")
length(worms.accepted$scientificName)
length(unique(worms.accepted$scientificName))
length(unique(worms.accepted$acceptedNameUsage))
RedSPnames <- red$scientificName
write.csv(RedSPnames, file = "../Data/LifeWatchtest.csv", col.names = T, sep = ",")
head(fbandred.statustable)
head(fbandred.familytable)
fbandred.familytable[,4] <- 0
head(fbandred.familytable)
fbandred.familytable[,5:6] <- 0
coln <_ c("Family", "NoSpeciesAssessed", "NoEndangeredSp", "ProportionEndangered-Assessed", "TotalSpp", "ProportionAssessed", "ProportionEndangered-Total")
coln <- c("Family", "NoSpeciesAssessed", "NoEndangeredSp", "ProportionEndangered-Assessed", "TotalSpp", "ProportionAssessed", "ProportionEndangered-Total")
colnames(fbandred.statustable) <- coln
colnames(fbandred.famtable) <- coln
colnames(fbandred.familytable) <- coln
fbandred.familytable[,5:7]<- 0
coln <- c("Family", "NoSpeciesAssessed", "NoEndangeredSp", "ProportionEndangered-Assessed", "TotalSpp", "ProportionAssessed", "ProportionEndangered-Total")
colnames(fbandred.familytable) <- coln
library(dplyr)
tab.temp <- tibble::as_tibble(fbandred.familytable)
tab.temp <- tab.temp%>%
mutate(`ProportionEndangered-Assessed` = NoEndangeredSp/NoSpeciesAssessed*100)
fb.fam.table <- table(fb$Family)
head(fb.fam.table)
fb.fam.table <- as.data.frame(fb.fam.table)
fb.fam.table <- order(fb.fam.table)
head(fb.fam.table)
fb.fam.table <- table(fb$Family)
fb.fam.table <- as.data.frame(fb.fam.table)
View(fb.fam.table)
fb.ctable <- fb.fam.table
fb.ctable[3:7] <- 0
coln2 <- c("Family", "TotalSpp", "NoSpeciesAssessed",  "ProportionAssessed", "NoEndangeredSp", "ProportionEndangered-Assessed", "ProportionEndangered-Total")
colnames(fb.ctable) <- coln2
x = 1
temp <- match(fb.ctable$Family[x], fbandred.familytable$Family)
if (is.na(temp) == F ) {
fb.ctable$NoSpeciesAssessed[x] <- fbandred.familytable$NoSpeciesAssessed[temp]
}
if (is.na(temp) == F ) {
fb.ctable$NoSpeciesAssessed[x] <- fbandred.familytable$NoSpeciesAssessed[temp]
print(c("Not NA!"))
}
else {
fb.ctable$NoSpeciesAssessed[x] <- c("0")
}
print(c("Not NA!"), x)
if (is.na(temp) == T ) {
fb.ctable$NoSpeciesAssessed[x] <- c("0")
print(c("Not assessed"), x)
}
for (x in 1:length(fb.ctable$Family)) {
#x = 1
temp <- match(fb.ctable$Family[x], fbandred.familytable$Family)
if (is.na(temp) == F ) {
fb.ctable$NoSpeciesAssessed[x] <- fbandred.familytable$NoSpeciesAssessed[temp]
print(c("Not NA!"), x)
}
if (is.na(temp) == T ) {
fb.ctable$NoSpeciesAssessed[x] <- c("0")
print(c("Not assessed"), x)
}
}
View(fb.ctable)
length(fb.ctable$Family)
temp <- match(fb.ctable$Family[x], fbandred.familytable$Family)
x = 1
temp <- match(fb.ctable$Family[x], fbandred.familytable$Family)
x = 10
temp <- match(fb.ctable$Family[x], fbandred.familytable$Family)
temp <- as.integer(match(fb.ctable$Family[x], fbandred.familytable$Family))
temp <- as.integer(match(fb.ctable$Family[x], fbandred.familytable$Family))
temp <- as.numeric(match(fb.ctable$Family[x], fbandred.familytable$Family))
x = 1
temp <- as.numeric(match(fb.ctable$Family[x], fbandred.familytable$Family))
for (x in 1:length(fb.ctable$Family)) {
x = 1
temp <- as.numeric(match(fb.ctable$Family[x], fbandred.familytable$Family))
if (is.na(temp) == F ) {
fb.ctable$NoSpeciesAssessed[x] <- fbandred.familytable$NoSpeciesAssessed[temp]
#print(c("Not NA!"), x)
}
if (is.na(temp) == T ) {
fb.ctable$NoSpeciesAssessed[x] <- c("0")
#print(c("Not assessed"), x)
}
}
for (x in 1:length(fb.ctable$Family)) {
x = 1
temp <- as.numeric(match(fb.ctable$Family[x], fbandred.familytable$Family))
if (is.na(temp) == F ) {
fb.ctable$NoSpeciesAssessed[x] <- fbandred.familytable$NoSpeciesAssessed[temp]
#print(c("Not NA!"), x)
}
if (is.na(temp) == T ) {
fb.ctable$NoSpeciesAssessed[x] <- c("NotAssessed")
#print(c("Not assessed"), x)
}
}
View(fbandred.familytable)
View(fb.ctable)
for (x in 1:length(fb.ctable$Family)) {
#x = 1
temp <- as.numeric(match(fb.ctable$Family[x], fbandred.familytable$Family))
if (is.na(temp) == F ) {
fb.ctable$NoSpeciesAssessed[x] <- fbandred.familytable$NoSpeciesAssessed[temp]
#print(c("Not NA!"), x)
}
if (is.na(temp) == T ) {
fb.ctable$NoSpeciesAssessed[x] <- c("NotAssessed")
#print(c("Not assessed"), x)
}
}
View(fb.ctable)
fb.c.tibble <- tibble::as_tibble(fb.ctable)
fb.c.tibble <- fb.c.tibble%>%
mutate(ProportionAssessed = NoSpeciesAssessed/TotalSpp*100)
for (x in 1:length(fb.ctable)) {
if (fb.ctable$NoSpeciesAssessed != "NotAssessed") {
fb.ctable$ProportionAssessed[x] <- fb.ctable$NoSpeciesAssessed[x]/fb.ctable$TotalSpp*100
}
if (fb.ctable$NoSpeciesAssessed == "NotAssessed") {
fb.ctable$ProportionAssessed[x] <- 0
}
}
warnings()
for (x in 1:length(fb.ctable)) {
if (fb.ctable$NoSpeciesAssessed[x] != "NotAssessed") {
fb.ctable$ProportionAssessed[x] <- fb.ctable$NoSpeciesAssessed[x]/fb.ctable$TotalSpp*100
}
if (fb.ctable$NoSpeciesAssessed[x] == "NotAssessed") {
fb.ctable$ProportionAssessed[x] <- 0
}
}
for (x in 1:length(fb.ctable)) {
if (fb.ctable$NoSpeciesAssessed[x] != "NotAssessed") {
fb.ctable$ProportionAssessed[x] <- as.numeric(fb.ctable$NoSpeciesAssessed[x])/as.numeric(fb.ctable$TotalSpp)*100
}
if (fb.ctable$NoSpeciesAssessed[x] == "NotAssessed") {
fb.ctable$ProportionAssessed[x] <- 0
}
}
for (x in 1:length(fb.ctable$Family)) {
#x = 1
temp <- as.numeric(match(fb.ctable$Family[x], fbandred.familytable$Family))
if (is.na(temp) == F ) {
fb.ctable$NoSpeciesAssessed[x] <- fbandred.familytable$NoSpeciesAssessed[temp]
}
if (is.na(temp) == T ) {
fb.ctable$NoSpeciesAssessed[x] <- O
}
}
for (x in 1:length(fb.ctable$Family)) {
#x = 1
temp <- as.numeric(match(fb.ctable$Family[x], fbandred.familytable$Family))
if (is.na(temp) == F ) {
fb.ctable$NoSpeciesAssessed[x] <- fbandred.familytable$NoSpeciesAssessed[temp]
}
if (is.na(temp) == T ) {
fb.ctable$NoSpeciesAssessed[x] <- NA
}
}
length(is.na(fb.ctable$NoSpeciesAssessed))
fb.ctable$ProportionAssessed <- fb.ctable$NoSpeciesAssessed / fb.ctable$TotalSpp
fb.ctable$TotalSpp
fb.ctable$NoSpeciesAssessed
fb.ctable$NoSpeciesAssessed <- as.numeric(fb.ctable$NoSpeciesAssessed)
fb.ctable$NoSpeciesAssessed
fb.ctable$ProportionAssessed <- fb.ctable$NoSpeciesAssessed / fb.ctable$TotalSpp
# load required packages
library(fishtree)
install.packages("caper")
#install.packages("caper")
library(caper)
act.tree <- read.tree("../Data/actinopt_full.trees")
act.tree <- act.tree[[1]]
grep("Hippocampus_", act.tree$tip.label)
act.tree <- drop.tip(act.tree, grep("Hippocampus_", act.tree$tip.label))
act.tree
act.tree$tip.label
a <- grep("Polypterus_",act.tree$tip.label)
a
act.tree$tip.label[-a]
act.tree.2 <- drop.tip(act.tree, act.tree$tip.label[-a])
act.tree.2
a <- mrca(act.tree,a)
?mrca
a <- getMRCA(act.tree,a)
a
install.packages("phylobase")
library(phylobase)
act.tree$edge.length
act.tree$edge
act.tree$Nnode
act.tree
a.ed <- ed.calc(act.tree)$spp
save(fb.ctable, file = "../Data/TABLE_WORKINPROGRESS.Rdata")
