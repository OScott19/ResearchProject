unique(fish.tax$rank)
head(fish.tax)
fish.names <- rl_common_names(Actinopterygii, key = my.key)
fish.names <- rl_common_names('Actinopterygii', key = my.key)
fish.names
fish.names$name
fish.names$result
fish.names$result$list()
fish.names$result$list
rl_common_names('Actinopterygii', key = my.key)
#clear workspace
rm(list=ls())
graphics.off()
master.db <- data.frame(matrix(ncol=6, nrow = 50000))
colnames(master.db) <- c("All.spp", "FToL.spp", "WoRMS.spp", "RL.spp", "RL.Rank", "GeneticData")
# initialise new frame (required for tidyr)
fishtree <- data.frame()
# subset fishbase for the correct class of fish
act.data <- subset(fishbase, fishbase$Class=="Actinopterygii")
# import all the modules from the test files
source(file = "Documents/CMEECourseWork/ResearchProject/Code/Fishtree_test.R")
source(file = "Documents/CMEECourseWork/ResearchProject/Code/RedList_test.R")
master.db <- data.frame(matrix(ncol=6, nrow = 50000))
colnames(master.db) <- c("All.spp", "FToL.spp", "WoRMS.spp", "RL.spp", "RL.Rank", "GeneticData")
# initialise new frame (required for tidyr)
fishtree <- data.frame()
# subset fishbase for the correct class of fish
act.data <- subset(fishbase, fishbase$Class=="Actinopterygii")
# this creates a new col called GS and combines genus and species
fishtree <- tidyr::unite(act.data, GS, Genus, Species, sep = " ")
fishtree0 <- as.vector(rep(0, length(master.db$FToL.spp)-length(fishtree$GS)))
fishtree.50 <- c()
fishtree.50 <- c(fishtree$GS, fishtree0)
tail(fishtree.50)
master.db$FToL.spp <- fishtree.50
#import whole dataset
redlist.all <- read.csv("Documents/CMEECourseWork/ResearchProject/Data/redlist_species_data_84c02514-9a98-4c0b-92de-465f9605a0e3/assessments.csv", stringsAsFactors = F)
#create vector with just the data we need right now
redlist <- data.frame(matrix(ncol=2, nrow= length(redlist.all$assessmentId)))
colnames(redlist) <- c("RedList.species", "RedList.status")
# create this seperate vector, and make the legnth of the columns the right length
redlist[,1] <- c(redlist.all$scientificName, redlist0)
redlist[,2] <- c(redlist.all$redlistCategory, redlist0)
redlist0 <- as.vector(rep(0, length(master.db$FToL.spp)-length(redlist$RedList.species)))
redlist[,1] <- c(redlist.all$scientificName, redlist0)
#create vector with just the data we need right now
redlist <- data.frame(matrix(ncol=2, nrow= length(master.db$All.spp)))
colnames(redlist) <- c("RedList.species", "RedList.status")
# create this seperate vector, and make the legnth of the columns the right length
redlist0 <- as.vector(rep(0, length(master.db$FToL.spp)-length(redlist$RedList.species)))
redlist[,1] <- c(redlist.all$scientificName, redlist0)
# create this seperate vector, and make the legnth of the columns the right length
redlist0 <- as.vector(rep(0, length(master.db$FToL.spp)-length(redlist.all$assessmentId)))
redlist[,1] <- c(redlist.all$scientificName, redlist0)
redlist[,2] <- c(redlist.all$redlistCategory, redlist0)
master.db$RL.spp <- redlist$RedList.species
master.db$RL.Rank <- redlist$RedList.status
master.spp <- cbind(fishtree$GS, redlist$RedList.species) # THIS DOESN'T WORK YET
master.spp <- c(fishtree$GS, redlist$RedList.species) # THIS DOESN'T WORK YET
## rl_history procedure
trout<-rl_history("Salmo trutta", key = my.key)
View(trout)
trout$
trout$result
trout$result
View(redlist.all)
IUCN<-NULL
for (I in redlist.all$scientificName) {
evaluation  <-rl_history(i, key = my.key)
result<-evaluation$result
result$sci_name<-i
IUCN<-cbind(IUCN,result)
print(i)
}
IUCN<-NULL
for (i in redlist.all$scientificName) {
evaluation  <-rl_history(i, key = my.key)
result<-evaluation$result
result$sci_name<-i
IUCN<-cbind(IUCN,result)
print(i)
}
IUCN<-NULL
for (i in redlist.all$scientificName) {
evaluation  <-rl_history(i, key = my.key)
result<-evaluation$result
result$sci_name<-i
IUCN<-rbind(IUCN,result)
print(i)
}
View(IUCN)
master.spp <- c(fishtree$GS, redlist$RedList.species) # THIS DOESN'T WORK YET
length(master.spp)
master.spp <- c(fishtree$GS, redlist$RedList.species) # THIS DOESN'T WORK YET
length(master.spp) # 81759
#add species from the fish tree
master.spp <- c()
master.spp <- c(fishtree$GS, redlist$RedList.species) # THIS DOESN'T WORK YET
length(master.spp) # 81759
length(unique(master.spp))
load("../Data/RedListFishBaseFamilyAnalysis.Rdata")
load("../Data/APIScriptOutput.Rdata")
load("../Data/APIScriptOutput2.Rdata")
store <- data.frame()
a <- toupper("Acipenseridae")
for (i in 1:length(taxanomic.data)) {
if (a %in% taxanomic.data[[i]] ) {
temp.name <- taxanomic.data[[i]]$name
temp.rest <- taxanomic.data[[i]]$result
temp <- cbind(as.character(temp.name), temp.rest)
store <- rbind(store, temp)
}
}
## lets try another approach
data <- read.csv("../Data/FBandRed.csv", stringsAsFactors = F)
data.a <- subset(data, data$Family == "Acipenseridae")
cols.use <- c(2,3)
data.a <- data.a[,cols.use]
data.a$Scores <- NA
## now we allocate scores:
# GE should be the RL status converted to GE as outlined by Isaac et al. 2007 - 0 = LC, 1 = NT, 2 = VU, 3 = EN, 4 = CR
for (x in 1:length(data.a$ScientificName)) {
if (data.a$RedStatus[x] == "Critically Endangered") {
data.a$Scores[x] <-  4
}}
for (x in 1:length(data.a$ScientificName)) {
if (data.a$RedStatus[x] == "Endangered") {
data.a$Scores[x] <-  3
}}
for (x in 1:length(data.a$ScientificName)) {
if (data.a$RedStatus[x] == "Vulnerable") {
data.a$Scores[x] <-  2
}}
for (x in 1:length(data.a$ScientificName)) {
if (data.a$RedStatus[x] == "Near Threatened") {
data.a$Scores[x] <-  1
}}
for (x in 1:length(data.a$ScientificName)) {
if (data.a$RedStatus[x] == "Least Concern") {
data.a$Scores[x] <-  0
}}
######
A
save(data.a, file = "AcipenseridaeForEDGE.Rdata")
load("../Data/RedListFishBaseFamilyAnalysis.Rdata")
load("../Data/APIScriptOutput.Rdata")
load("../Data/APIScriptOutput2.Rdata")
store <- data.frame()
a <- toupper("Acipenseridae")
for (i in 1:length(taxanomic.data)) {
if (a %in% taxanomic.data[[i]] ) {
temp.name <- taxanomic.data[[i]]$name
temp.rest <- taxanomic.data[[i]]$result
temp <- cbind(as.character(temp.name), temp.rest)
store <- rbind(store, temp)
}
}
## lets try another approach
data <- read.csv("../Data/FBandRed.csv", stringsAsFactors = F)
data.a <- subset(data, data$Family == "Acipenseridae")
cols.use <- c(2,3)
data.a <- data.a[,cols.use]
data.a$Scores <- NA
## now we allocate scores:
# GE should be the RL status converted to GE as outlined by Isaac et al. 2007 - 0 = LC, 1 = NT, 2 = VU, 3 = EN, 4 = CR
for (x in 1:length(data.a$ScientificName)) {
if (data.a$RedStatus[x] == "Critically Endangered") {
data.a$Scores[x] <-  4
}}
for (x in 1:length(data.a$ScientificName)) {
if (data.a$RedStatus[x] == "Endangered") {
data.a$Scores[x] <-  3
}}
for (x in 1:length(data.a$ScientificName)) {
if (data.a$RedStatus[x] == "Vulnerable") {
data.a$Scores[x] <-  2
}}
for (x in 1:length(data.a$ScientificName)) {
if (data.a$RedStatus[x] == "Near Threatened") {
data.a$Scores[x] <-  1
}}
for (x in 1:length(data.a$ScientificName)) {
if (data.a$RedStatus[x] == "Least Concern") {
data.a$Scores[x] <-  0
}}
######
#save(data.a, file = "AcipenseridaeForEDGE.Rdata")
graphics.off()
rm(list=ls())
graphics.off()
# set wd
setwd("~/Documents/ResearchProject/Code/")
#housekeeping
rm(list=ls())
graphics.off()
# set wd
setwd("~/Documents/ResearchProject/Code/")
#load in useful data
load("../Data/RedListFishBaseFamilyAnalysis.Rdata")
load("../Data/APIScriptOutput.Rdata")
load("../Data/APIScriptOutput2.Rdata")
store <- data.frame()
a <- toupper("Acipenseridae")
for (i in 1:length(taxanomic.data)) {
if (a %in% taxanomic.data[[i]] ) {
temp.name <- taxanomic.data[[i]]$name
temp.rest <- taxanomic.data[[i]]$result
temp <- cbind(as.character(temp.name), temp.rest)
store <- rbind(store, temp)
}
}
## lets try another approach
data <- read.csv("../Data/FBandRed.csv", stringsAsFactors = F)
data.a <- subset(data, data$Family == "Acipenseridae")
cols.use <- c(2,3)
data.a <- data.a[,cols.use]
data.a$Scores <- NA
## now we allocate scores:
# GE should be the RL status converted to GE as outlined by Isaac et al. 2007 - 0 = LC, 1 = NT, 2 = VU, 3 = EN, 4 = CR
for (x in 1:length(data.a$ScientificName)) {
if (data.a$RedStatus[x] == "Critically Endangered") {
data.a$Scores[x] <-  4
}}
for (x in 1:length(data.a$ScientificName)) {
if (data.a$RedStatus[x] == "Endangered") {
data.a$Scores[x] <-  3
}}
for (x in 1:length(data.a$ScientificName)) {
if (data.a$RedStatus[x] == "Vulnerable") {
data.a$Scores[x] <-  2
}}
for (x in 1:length(data.a$ScientificName)) {
if (data.a$RedStatus[x] == "Near Threatened") {
data.a$Scores[x] <-  1
}}
for (x in 1:length(data.a$ScientificName)) {
if (data.a$RedStatus[x] == "Least Concern") {
data.a$Scores[x] <-  0
}}
######
#save(data.a, file = "AcipenseridaeForEDGE.Rdata")
save(data.a, file = "AcipenseridaeForEDGE.Rdata")
# packages
library(caper)
library(phytools)
library(phylobase)
library(data.table)
library(geiger)
library(pez)
tree_all <- read.tree("../Data/actinopt_full.trees")
one_tree <- tree_all[[1]]
test <- getNode(x = one_tree, node = data.a$ScientificName, type = all, missing = warn)
test <- getNode(x = one_tree, node = data.a$ScientificName, type = "all", missing = "warn")
library(phylobase)
test <- getNode(x = one_tree, node = data.a$ScientificName, type = "all", missing = "warn")
test <- getNode(x = one_tree, node = data.a$ScientificName[1]) # , type = "all", missing = "warn")
test <- getNode(x = one_tree, node = as.character(data.a$ScientificName[1])) # , type = "all", missing = "warn")
source('~/Documents/ResearchProject/Code/CONTINUEWITHTHISSCRIPT.R', echo=TRUE)
one_tree <- tree_all[1]
tree_all <- read.tree("../Data/actinopt_full.trees")
one_tree <- tree_all[1]
test <- getNode(x = one_tree, node = as.character(data.a$ScientificName[1])) # , type = "all", missing = "warn")
or_this <- tree_all[[1]]$
# use MRCA to find the most recent common ancestors of the Acipenseridae family
# to do this, we need to find the node numbers associated with each of the species
test <- getNode(x = one_tree, node = as.character(data.a$ScientificName[1])) # , type = "all", missing = "warn")
or_this <- tree_all[[1]]
test <- getNode(x = one_tree, node = as.character(data.a$ScientificName[1])) # , type = "all", missing = "warn")
test <- getNode(x = or_this, node = as.character(data.a$ScientificName[1])) # , type = "all", missing = "warn")
as.character(data.a$ScientificName[1])
test <- or_this, "Huso dauricus")
test <- getNode(or_this, "Huso dauricus")
hi <- as.vector("Huso dauricus")
test <- getNode(or_this, hi)
test <- getNode(or_this, hi)
test <- getNode(or_this, 1)
test <- getNode(or_this[1], 1)
test <- getNode(or_this$edge, 1)
test <- getNode(or_this$edge.length, 1)
test <- getNode(or_this$Nnode, 1)
test <- getNode(or_this$tip.label, 1)
test <- getNode(or_this$tip.label, hi)
geospiza(or_this)
phylo4d(x=or_this)
new_data <- phylo4d(x=or_this)
test <- getNode(new_data, hi)
test <- getNode(new_data, hi)
test <- getNode(new_data, hi, node = all)
test <- getNode(new_data, hi, node = "all")
test <- getNode(new_data, hi, type = "all")
test
test <- getNode(new_data, hi, type = "tip")
test <- getNode(new_data, data.a$ScientificName, type = "tip")
hi <- as.vector("Huso_dauricus") # target name
test <- getNode(new_data, hi, type = "tip")
test <- getNode(new_data, hi, type = "all") # this works: now we need to find all of the nodes
test <- getNode(new_data, hi, type = "all") # this works: now we need to find all of the nodes
data.a[" "] <- "_"
data.a[data.a==" "] <- "_"
data.a[data.a==" "] <- "_"
data.a[data.a==*" "*] <- "_"
data.a <- gsub(" ", "_", data.a)
data <- read.csv("../Data/FBandRed.csv", stringsAsFactors = F)
data.a <- subset(data, data$Family == "Acipenseridae")
cols.use <- c(2,3)
data.a <- data.a[,cols.use]
data.a$Scores <- NA
for (x in 1:length(data.a$ScientificName)) {
if (data.a$RedStatus[x] == "Critically Endangered") {
data.a$Scores[x] <-  4
}}
for (x in 1:length(data.a$ScientificName)) {
if (data.a$RedStatus[x] == "Endangered") {
data.a$Scores[x] <-  3
}}
for (x in 1:length(data.a$ScientificName)) {
if (data.a$RedStatus[x] == "Vulnerable") {
data.a$Scores[x] <-  2
}}
for (x in 1:length(data.a$ScientificName)) {
if (data.a$RedStatus[x] == "Near Threatened") {
data.a$Scores[x] <-  1
}}
for (x in 1:length(data.a$ScientificName)) {
if (data.a$RedStatus[x] == "Least Concern") {
data.a$Scores[x] <-  0
}}
save(data.a, file = "AcipenseridaeForEDGE.Rdata")
data.b <- gsub(" ", "_", data.a)
data.b <- gsub(" ", "_", data.a$ScientificName)
data.a$ScientificName <- gsub(" ", "_", data.a$ScientificName)
test_all <- getNode(new_data, data.a$ScientificName, type = "all")
test_all
ancestors_all <- MRCA(new_data, test_all)
new.tree <- keep.tip(new_data, ancestors_all)
new.tree <- keep.tip(or_this, ancestors_all)
fishlist.breakdown
act.data <- subset(fishbase, fishbase$Class=="Actinopterygii") # crucial: spell it correctly!
# load required packages
library(fishtree)
library(rfishbase)
library(picante)
library(geiger)
library(ape) # analyses of phylogenetics and evolution
library(dplyr)
library(tidyr)
library(ggplot2)
library(rredlist)
#install.packages("caper")
library(caper)
head(fishbase) # this is a list of all of species in the fishbase database
# exploration of data
length(unique(fishbase$FamCode)) # 549 families
length(unique(fishbase$SpecCode)) # 33 104 species
length(unique(fishbase$Class)) # 6
unique(fishbase$Class) #  we are only interested in Actinopterygii
act.data <- subset(fishbase, fishbase$Class=="Actinopterygii") # crucial: spell it correctly!
# more exploration
class(fishbase) # a data frame (and also a table?)
fish.tax <- fishtree_taxonomy(rank== class)
fish.fam <- subset(fish.tax, rank=="family")
# initialise new frame (required for tidyr)
gvs <- data.frame()
# this creates a new col called GS and combines genus and species
gvs <- tidyr::unite(act.data, GS, Genus, Species, sep = " ")
head(gvs$GS)
length(gvs$GS) # 31759 entries, as expected
length(unique(gvs$GS)) # also 31759!
# more exploration
class(fishbase) # a data frame (and also a table?)
fish.tax <- fishtree_taxonomy(rank== class)
length(fish.tax)
fish.fam <- subset(fish.tax, rank=="family")
Fish.orders.vector <- read.csv(file="Fish_orders.csv", header = F, sep ="")
fishlist.breakdown <- read.csv(file="Fishlist_breakdown.CSV", header = T, sep = ",", stringsAsFactors = F)
getwd()
fishlist.breakdown <- read.csv(file="../Data/Fishlist_breakdown.CSV", header = T, sep = ",", stringsAsFactors = F)
fishlist.breakdown[,2] <- as.numeric(fishlist.breakdown[,2])
fishlist.breakdown[,3] <- as.numeric(fishlist.breakdown[,3])
fishlist.breakdown <- as.data.frame(fishlist.breakdown[,-4])
fishlist.breakdown
total.num.species <- fishlist.breakdown[2:no(fishlist.breakdown),2]
total.num.species
act.tree <- act.tree[[1]]
act.tree <- or_this
act.tree <- drop.tip(act.tree, act.tree$tip.label[grep("Hippocampus_", act.tree$tip.label)])
grep("Hippocampus_", act.tree$tip.label)
act.tree$tip.label
a <- grep("Polypterus_",act.tree$tip.label)
act.tree.2 <- drop.tip(or_this, or_this$tip.label[-data.a$ScientificName])
a <-
act.tree.2 <- drop.tip(or_this, or_this$tip.label[-test_all])
### didn't actually need to do any of that (oh dear)
-
Acipen.tree <- drop.tip(or_this, or_this$tip.label[-test_all])
### didn't actually need to do any of that (oh dear)
-
Acipentree <- drop.tip(or_this, or_this$tip.label[-test_all])
### didn't actually need to do any of that (oh dear)
-
Acipen.tree <- c()
### didn't actually need to do any of that (oh dear)
-
Acipen.tree <- c()
### didn't actually need to do any of that (oh dear)
-
Acipen.tre <- c()
Acipen.tre <- c()
Acipen.tree <- c()
Acipen.tree <- drop.tip(or_this, or_this$tip.label[-test_all])
save(Acipen.tree, file = "AcipenTree.Rata")
save(data.a, file = "../Data/AcipenseridaeForEDGE.Rdata")
aci.ge <- load(file = "../Data/AcipenseridaeForEDGE.Rdata"0)
aci.ge <- load(file = "../Data/AcipenseridaeForEDGE.Rdata")
rm(list=ls())
graphics.off()
# packages
library(caper) #installed
library(phytools) #installed
library(phylobase) #installed
library(data.table) #installed
library(geiger) #installed
library(pez)  #installed
# set working directory - enter your desired folder location e.g. "c:/users/rikki/Desktop")
setwd("~/Documents/CMEECourseWork/ResearchProject/Code")
tree <- load(file = "AcipenTree.Rata")
aci.ge <- load(file = "../Data/AcipenseridaeForEDGE.Rdata")
# calculate ED for all species in phylogeny
ed.scores <- ed.calc(tree)$spp
tree <- Acipen.tree
# calculate ED for all species in phylogeny
ed.scores <- ed.calc(tree)$spp
# get dataframe ready to calculate EDGE scores
edge.scores <- data.frame(ed.scores, GE = NA, EDGE = NA)
species.GE <- load(file = "../Data/AcipenseridaeForEDGE.Rdata")
# run through each species and calculate EDGE scores using a for loop
for(i in 1:length(edge.scores$species)){
# if the species in the tree is in the GE dataset
if(edge.scores$species[i] %in% species.GE$Species){
# if the GE is not NA (i.e. DD or unassessed species)
if(!is.na(species.GE$GE[species.GE$Species == edge.scores$species[i]])){
# assign GE to the dataset from the GE dataset
edge.scores$GE[i] <- species.GE$GE[species.GE$Species == edge.scores$species[i]]
# calculate EDGE score using ED and GE for the species
edge.scores$EDGE[i] <- log(1+edge.scores$ED[i]) + (edge.scores$GE[i]*log(2))
}
}
}
load(file = "../Data/AcipenseridaeForEDGE.Rdata")
species.GE <- data.a
# calculate ED for all species in phylogeny
ed.scores <- ed.calc(tree)$spp
# get dataframe ready to calculate EDGE scores
edge.scores <- data.frame(ed.scores, GE = NA, EDGE = NA)
# run through each species and calculate EDGE scores using a for loop
for(i in 1:length(edge.scores$species)){
# if the species in the tree is in the GE dataset
if(edge.scores$species[i] %in% species.GE$Species){
# if the GE is not NA (i.e. DD or unassessed species)
if(!is.na(species.GE$GE[species.GE$Species == edge.scores$species[i]])){
# assign GE to the dataset from the GE dataset
edge.scores$GE[i] <- species.GE$GE[species.GE$Species == edge.scores$species[i]]
# calculate EDGE score using ED and GE for the species
edge.scores$EDGE[i] <- log(1+edge.scores$ED[i]) + (edge.scores$GE[i]*log(2))
}
}
}
# get EDGE species - those with greater than median ED and in a threatened RL category (VU, EN, CR)
edge.spp <- edge.scores[edge.scores$ED > median(edge.scores$ED),]
edge.spp <- edge.scores[edge.scores$GE %in% c(2,3,4),]
edge.spp <- edge.spp[order(edge.spp$EDGE, decreasing = T, na.last = T),]
# calculate ED for all species in phylogeny
ed.scores <- ed.calc(tree)$spp
# get dataframe ready to calculate EDGE scores
edge.scores <- data.frame(ed.scores, GE = NA, EDGE = NA)
# run through each species and calculate EDGE scores using a for loop
for(i in 1:length(edge.scores$species)){
# if the species in the tree is in the GE dataset
if(edge.scores$species[i] %in% species.GE$Species){
# if the GE is not NA (i.e. DD or unassessed species)
if(!is.na(species.GE$GE[species.GE$Species == edge.scores$species[i]])){
# assign GE to the dataset from the GE dataset
edge.scores$GE[i] <- species.GE$GE[species.GE$Species == edge.scores$species[i]]
# calculate EDGE score using ED and GE for the species
edge.scores$EDGE[i] <- log(1+edge.scores$ED[i]) + (edge.scores$GE[i]*log(2))
}
}
}
colnames(species.GE) <- c("Species", "Status", "GE")
# run through each species and calculate EDGE scores using a for loop
for(i in 1:length(edge.scores$species)){
# if the species in the tree is in the GE dataset
if(edge.scores$species[i] %in% species.GE$Species){
# if the GE is not NA (i.e. DD or unassessed species)
if(!is.na(species.GE$GE[species.GE$Species == edge.scores$species[i]])){
# assign GE to the dataset from the GE dataset
edge.scores$GE[i] <- species.GE$GE[species.GE$Species == edge.scores$species[i]]
# calculate EDGE score using ED and GE for the species
edge.scores$EDGE[i] <- log(1+edge.scores$ED[i]) + (edge.scores$GE[i]*log(2))
}
}
}
# get EDGE species - those with greater than median ED and in a threatened RL category (VU, EN, CR)
edge.spp <- edge.scores[edge.scores$ED > median(edge.scores$ED),]
edge.spp <- edge.scores[edge.scores$GE %in% c(2,3,4),]
edge.spp <- edge.spp[order(edge.spp$EDGE, decreasing = T, na.last = T),]
View(edge.spp)
# save the csvs
write.csv(edge.scores, "../Data/ED_EDGE_scores_Acipenseridae.csv",row.names = F)
write.csv(edge.spp, "../Data/EDGE_spp_Acipenseridae.csv",row.names = F)
# save the R data
save(tree, species.GE, ed.scores,edge.scores,edge.spp, file = "../Data/EDGE_calculations_Acipenseridae.RData")
