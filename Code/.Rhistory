# Question 30
fern2 <- function(start_position, direction, length, minlength)  {
leftright <- c(-1, +1)
second_position <- turtle(start_position, direction, length)
if (length > minlength) {
dir <- sample(leftright, 1)
fern2(second_position, ((direction - pi/4)*dir), length*0.25, minlength)
fern2(second_position, (direction) , length*0.87, minlength)
}
}
draw_fern2 <- function()  {
graphics.off()
plot(0:200, 0:200, xlim = c(0, 20), ylim = c(0, 10), type="n")
fern2(c(0,5), 0, 2, 0.01)
}
draw_fern2()
draw_fern2 <- function()  {
graphics.off()
plot(0:200, 0:200, xlim = c(0, 20), ylim = c(0, 10), type="n")
fern2(c(0,5), 1, 2, 0.01)
}
draw_fern2()
draw_fern2 <- function()  {
graphics.off()
plot(0:200, 0:200, xlim = c(0, 20), ylim = c(0, 10), type="n")
fern2(c(0,5), pi, 2, 0.01)
}
draw_fern2()
draw_fern2
draw_fern2()
draw_fern2()
draw_fern2 <- function()  {
graphics.off()
plot(0:200, 0:200, xlim = c(0, 20), ylim = c(0, 10), type="n")
fern2(c(0,5), 0, 2, 0.01)
}
draw_fern2()
draw_fern2 <- function()  {
graphics.off()
plot(0:200, 0:200, xlim = c(0, 20), ylim = c(0, 10), type="n")
fern2(c(0,5), pi/2, 2, 0.01)
}
draw_fern2()
draw_fern2 <- function()  {
graphics.off()
plot(0:200, 0:200, xlim = c(-5,5), ylim = c(0, 25), type="n")
fern2(c(0,0), pi/2, 2, 0.01)
}
draw_fern2()
draw_fern2 <- function()  {
graphics.off()
plot(0:200, 0:200, xlim = c(-5,5), ylim = c(0, 25), type="n")
fern2(c(0,0), pi/2, 3, 0.01)
}
draw_fern2()
# Question 30
fern2 <- function(start_position, direction, length, minlength)  {
dir <- c(-1)
second_position <- turtle(start_position, direction, length)
if (length > minlength) {
fern2(second_position, ((direction + pi/4)*dir), length*0.25, minlength)
fern2(second_position, (direction) , length*0.87, minlength)
}
}
draw_fern2 <- function()  {
graphics.off()
plot(0:200, 0:200, xlim = c(-5,5), ylim = c(0, 25), type="n")
fern2(c(0,0), pi/2, 3, 0.01)
}
draw_fern2()
# Question 30
fern2 <- function(start_position, direction, length, minlength)  {
dir <- -1
second_position <- turtle(start_position, direction, length)
if (length > minlength) {
fern2(second_position, ((direction + pi/4)*dir), length*0.25, minlength)
fern2(second_position, (direction) , length*0.87, minlength)
}
}
draw_fern2()
# Question 30
fern2 <- function(start_position, direction, length, minlength)  {
dir <- -1
second_position <- turtle(start_position, direction, length)
if (length > minlength) {
fern2(second_position, ((direction - pi/4)*dir), length*0.25, minlength)
fern2(second_position, (direction) , length*0.87, minlength)
}
}
draw_fern2()
# Question 30
fern2 <- function(start_position, direction, length, minlength)  {
# Question 30
fern2 <- function(start_position, direction, length, minlength)  {
# Question 30
fern2 <- function(start_position, direction, length, minlength)  {
dir <- -1
second_position <- turtle(start_position, direction, length)
if (length > minlength) {
fern2(second_position, (direction + (pi/4*dir)), length*0.25, minlength)
fern2(second_position, (direction) , length*0.87, minlength)
}
}
draw_fern2()
# Question 30
fern2 <- function(start_position, direction, length, minlength)  {
dir <- -1
second_position <- turtle(start_position, direction, length)
if (length > minlength) {
fern2(second_position, (direction + (pi/4*dir)), length*0.25, minlength)
fern2(second_position, (direction) , length*0.87, minlength)
}
}
draw_fern2 <- function()  {
graphics.off()
plot(0:200, 0:200, xlim = c(-5,5), ylim = c(0, 25), type="n")
fern2(c(0,0), pi/2, 3, 0.01)
}
draw_fern2()
# Question 30
fern2 <- function(start_position, direction, length, minlength)  {
# Question 30
fern2 <- function(start_position, direction, length, minlength)  {
dir <- -1
second_position <- turtle(start_position, direction, length)
if (length > minlength) {
fern2(second_position, (direction + (pi/4)), length*0.25, minlength)
fern2(second_position, (direction) , length*0.87, minlength)
}
}
draw_fern2()
draw_fern2()
# Question 30
fern2 <- function(start_position, direction, length, minlength)  {
dir <- -1
second_position <- turtle(start_position, direction, length)
if (length > minlength) {
fern2(second_position, (direction - (pi/4)), length*0.25, minlength)
fern2(second_position, (direction) , length*0.87, minlength)
}
}
draw_fern2()
draw_fern2 <- function()  {
graphics.off()
plot(0:200, 0:200, xlim = c(-5,5), ylim = c(0, 25), type="n")
fern2(c(0,0), pi/2, 3, 0.01)
}
# Question 30
fern2 <- function(start_position, direction, length, minlength)  {
dir <- -1
second_position <- turtle(start_position, direction, length)
if (length > minlength) {
fern2(second_position, (direction - (pi/4)), length*0.25, minlength)
fern2(second_position, (direction) , length*0.87, minlength)
}
}
# Question 30
fern2 <- function(start_position, direction, length, minlength)  {
dir <- -1
second_position <- turtle(start_position, direction, length)
if (length > minlength) {
fern2(second_position, (direction - (pi/4)), length*0.25, minlength)
fern2(second_position, (direction) , length*0.87, minlength)
}
}
draw_fern2()
# Question 30
fern2 <- function(start_position, direction, length, minlength)  {
dir <- -1
second_position <- turtle(start_position, direction, length)
if (length > minlength) {
fern2(second_position, (direction + (pi/4)), length*0.25, minlength)
fern2(second_position, (direction) , length*0.87, minlength)
}
}
draw_fern2 <- function()  {
graphics.off()
plot(0:200, 0:200, xlim = c(-5,5), ylim = c(0, 25), type="n")
fern2(c(0,0), pi/2, 3, 0.01)
}
# Question 30
fern2 <- function(start_position, direction, length, minlength)  {
dir <- -1
second_position <- turtle(start_position, direction, length)
if (length > minlength) {
fern2(second_position, (direction - (pi/4)), length*0.25, minlength)
fern2(second_position, (direction) , length*0.87, minlength)
}
}
draw_fern2 <- function()  {
graphics.off()
plot(0:200, 0:200, xlim = c(-5,5), ylim = c(0, 25), type="n")
fern2(c(0,0), pi/2, 3, 0.01)
}
# Question 30
fern2 <- function(start_position, direction, length, minlength)  {
dir <- -1
second_position <- turtle(start_position, direction, length)
if (length > minlength) {
fern2(second_position, (direction + (pi/4)), length*0.25, minlength)
fern2(second_position, (direction) , length*0.87, minlength)
}
}
draw_fern2 <- function()  {
graphics.off()
plot(0:200, 0:200, xlim = c(-5,5), ylim = c(0, 25), type="n")
fern2(c(0,0), pi/2, 3, 0.01)
}
draw_fern2()
draw_fern2()
draw_fern2()
draw_fern2()
draw_fern2()
draw_fern2()
draw_fern2()
draw_fern2 <- function()  {
graphics.off()
plot(0:200, 0:200, xlim = c(-5,5), ylim = c(0, 25), type="n")
fern2(c(0,0), pi/2, 3, 0.1)
}
draw_fern2()
draw_fern2 <- function()  {
graphics.off()
plot(0:200, 0:200, xlim = c(-5,5), ylim = c(0, 25), type="n")
fern2(c(0,0), pi/2, 3, 1)
}
draw_fern2()
dir <- -1
dir
dir
dir
dir <- -1
dir <- c(-1)
dir
# Question 30
fern2 <- function(start_position, direction, length, minlength)  {
dir <- c(-1)
second_position <- turtle(start_position, direction, length)
if (length > minlength) {
fern2(second_position, (direction + (pi)), length*0.25, minlength)
fern2(second_position, (direction) , length*0.87, minlength)
}
}
graphics.off()
graphics.off()
source('~/Documents/CMEECourseWork/ResearchProject/Code/EDGE_croc.R')
install.packages("OUwie")
library(fishtree)
?fishtree
?ape
requireNamespace("rfishbase")
installed.packages("rfishbase")
install.packages("rfishbase")
library(rfishbase)
#install.packages("fishtree")
#install.packages("rfishbase")
install.packages("picante")
library(picante)
library(geiger)
?`rfishbase-package`
?rfishbase
fish.tax <- fishtree_taxonomy
fish.tax
length(fish.tax())
fish.tax <- fishtree_taxonomy()
length(fish.tax())
fish.tax <- fishtree_taxonomy()
length(fish.tax)
fish.tax
fish.tax$rank==genus
fish.tax$rank=="genus"
fish.tax$rank=="family"
subet(fish.tax, fish.tax$rank=="genus")
subset(fish.tax, fish.tax$rank=="genus")
fish.app <- subset(fish.tax, fish.tax$rank=="genus")
fish.spp <- subset(fish.tax, fish.tax$rank=="genus")
fish.spp
fish.spp <- subset(fish.tax, rank=="genus")
fish.spp
fish.tax
fish.spp <- subset(fish.tax, rank=="family")
fish.spp
fish.fam
fish.fam <- subset(fish.tax, rank=="family")
fish.fam
fishtree_alignment(Acanthuridae)
fishtree_alignment()
fishtree_phylogeny(Zeidae)
unique(fish.tax$rank)
my.key <- c("30c68b19cedcc7f1cee81aa9b07e1cd235c49d9af8c184d76998b05e59a77c22")
/api/v3/version
install.packages("rredlist")
library(rredlist)
rl_common_names('Loxodonta africana')
rl_common_names('Loxodonta africana', key = my.key)
a.sub <- subset(fish.tax, fish.tax$name=="Actinopterygii")
a.sub
a.sub <- subset(fish.tax, fish.tax$name=="Actinopterygii")
unique(fish.tax)
unique(fish.tax$rank)
head(fish.tax)
fish.names <- rl_common_names(Actinopterygii, key = my.key)
fish.names <- rl_common_names('Actinopterygii', key = my.key)
fish.names
fish.names$name
fish.names$result
fish.names$result$list()
fish.names$result$list
rl_common_names('Actinopterygii', key = my.key)
#clear workspace
rm(list=ls())
graphics.off()
master.db <- data.frame(matrix(ncol=6, nrow = 50000))
colnames(master.db) <- c("All.spp", "FToL.spp", "WoRMS.spp", "RL.spp", "RL.Rank", "GeneticData")
# initialise new frame (required for tidyr)
fishtree <- data.frame()
# subset fishbase for the correct class of fish
act.data <- subset(fishbase, fishbase$Class=="Actinopterygii")
# import all the modules from the test files
source(file = "Documents/CMEECourseWork/ResearchProject/Code/Fishtree_test.R")
source(file = "Documents/CMEECourseWork/ResearchProject/Code/RedList_test.R")
master.db <- data.frame(matrix(ncol=6, nrow = 50000))
colnames(master.db) <- c("All.spp", "FToL.spp", "WoRMS.spp", "RL.spp", "RL.Rank", "GeneticData")
# initialise new frame (required for tidyr)
fishtree <- data.frame()
# subset fishbase for the correct class of fish
act.data <- subset(fishbase, fishbase$Class=="Actinopterygii")
# this creates a new col called GS and combines genus and species
fishtree <- tidyr::unite(act.data, GS, Genus, Species, sep = " ")
fishtree0 <- as.vector(rep(0, length(master.db$FToL.spp)-length(fishtree$GS)))
fishtree.50 <- c()
fishtree.50 <- c(fishtree$GS, fishtree0)
tail(fishtree.50)
master.db$FToL.spp <- fishtree.50
#import whole dataset
redlist.all <- read.csv("Documents/CMEECourseWork/ResearchProject/Data/redlist_species_data_84c02514-9a98-4c0b-92de-465f9605a0e3/assessments.csv", stringsAsFactors = F)
#create vector with just the data we need right now
redlist <- data.frame(matrix(ncol=2, nrow= length(redlist.all$assessmentId)))
colnames(redlist) <- c("RedList.species", "RedList.status")
# create this seperate vector, and make the legnth of the columns the right length
redlist[,1] <- c(redlist.all$scientificName, redlist0)
redlist[,2] <- c(redlist.all$redlistCategory, redlist0)
redlist0 <- as.vector(rep(0, length(master.db$FToL.spp)-length(redlist$RedList.species)))
redlist[,1] <- c(redlist.all$scientificName, redlist0)
#create vector with just the data we need right now
redlist <- data.frame(matrix(ncol=2, nrow= length(master.db$All.spp)))
colnames(redlist) <- c("RedList.species", "RedList.status")
# create this seperate vector, and make the legnth of the columns the right length
redlist0 <- as.vector(rep(0, length(master.db$FToL.spp)-length(redlist$RedList.species)))
redlist[,1] <- c(redlist.all$scientificName, redlist0)
# create this seperate vector, and make the legnth of the columns the right length
redlist0 <- as.vector(rep(0, length(master.db$FToL.spp)-length(redlist.all$assessmentId)))
redlist[,1] <- c(redlist.all$scientificName, redlist0)
redlist[,2] <- c(redlist.all$redlistCategory, redlist0)
master.db$RL.spp <- redlist$RedList.species
master.db$RL.Rank <- redlist$RedList.status
master.spp <- cbind(fishtree$GS, redlist$RedList.species) # THIS DOESN'T WORK YET
master.spp <- c(fishtree$GS, redlist$RedList.species) # THIS DOESN'T WORK YET
## rl_history procedure
trout<-rl_history("Salmo trutta", key = my.key)
View(trout)
trout$
trout$result
trout$result
View(redlist.all)
IUCN<-NULL
for (I in redlist.all$scientificName) {
evaluation  <-rl_history(i, key = my.key)
result<-evaluation$result
result$sci_name<-i
IUCN<-cbind(IUCN,result)
print(i)
}
IUCN<-NULL
for (i in redlist.all$scientificName) {
evaluation  <-rl_history(i, key = my.key)
result<-evaluation$result
result$sci_name<-i
IUCN<-cbind(IUCN,result)
print(i)
}
IUCN<-NULL
for (i in redlist.all$scientificName) {
evaluation  <-rl_history(i, key = my.key)
result<-evaluation$result
result$sci_name<-i
IUCN<-rbind(IUCN,result)
print(i)
}
View(IUCN)
master.spp <- c(fishtree$GS, redlist$RedList.species) # THIS DOESN'T WORK YET
length(master.spp)
master.spp <- c(fishtree$GS, redlist$RedList.species) # THIS DOESN'T WORK YET
length(master.spp) # 81759
#add species from the fish tree
master.spp <- c()
master.spp <- c(fishtree$GS, redlist$RedList.species) # THIS DOESN'T WORK YET
length(master.spp) # 81759
length(unique(master.spp))
graphics.off()
rm(list = ls())
setwd("~/Documents/ResearchProject/Code/")
library(fishtree)
library(rfishbase)
library(picante)
library(geiger)
library(ape) # analyses of phylogenetics and evolution
library(dplyr)
library(tidyr)
library(ggplot2)
library(rredlist)
source("ExplorationAllData.R")
# and how many are in RL but not Worms?
RyWn <- c()
RnWy <- c()
countera <- 0 # RESET IN BETWEEN EVERY RUN!
counterb <- 0
for (x in 1:length(worms$scientificName)) {
# if the red list species is not found on the  species list (i.e. match is False)
if ((worms$scientificName[x] %in% red$scientificName)==F) {
countera <- countera + 1
RnWy[countera] <- worms$scientificName[x]
}
if ( (x <= length(red$scientificName) && (red$scientificName[x] %in% worms$scientificName)==F)) {
# then add one to the counter, and add the species to the RedList only vector
counterb <- counterb + 1
RyWn[counter] <-red$scientificName[x]
}
}
for (x in 1:length(worms$scientificName)) {
# if the red list species is not found on the  species list (i.e. match is False)
if ((worms$scientificName[x] %in% red$scientificName)==F) {
countera <- countera + 1
RnWy[countera] <- worms$scientificName[x]
}
if ( (x <= length(red$scientificName) && (red$scientificName[x] %in% worms$scientificName)==F)) {
# then add one to the counter, and add the species to the RedList only vector
counterb <- counterb + 1
RyWn[counterb] <-red$scientificName[x]
}
}
length(worms$scientificName) - (length(RnW) + length(RnWy))
RnW <- intersect(red$scientificName, worms$scientificName)  # worms has fewest matches, despite having largest database!
length(RnW) # 9580
length(worms$scientificName) - (length(RnW) + length(RnWy))
length(red$scientificName) - (length(RnW) + length(RyWn))
countera <- 0 # RESET IN BETWEEN EVERY RUN!
counterb <- 0
for (x in 1:length(red$scientificName)) {
# if the red list species is not found on the  species list (i.e. match is False)
if ((red$scientificName[x] %in% worms$scientificName)==F) {
# then add one to the counter, and add the species to the RedList only vector
countera <- countera + 1
RyWn[counter] <-red$scientificName[x]
}
}
countera <- 0 # RESET IN BETWEEN EVERY RUN!
for (x in 1:length(red$scientificName)) {
# if the red list species is not found on the  species list (i.e. match is False)
if ((red$scientificName[x] %in% worms$scientificName)==F) {
# then add one to the counter, and add the species to the RedList only vector
countera <- countera + 1
RyWn[countera] <-red$scientificName[x]
}
}
counterc <- 0
for (x in 1:length(red$scientificName)) {
for (x in 1:length(red$scientificName)) {
# if the red list species is not found on the  species list (i.e. match is False)
if ((red$scientificName[x] %in% worms$scientificName)==F) {
# then add one to the counter, and add the species to the RedList only vector
countera <- countera + 1
RyWn[countera] <-red$scientificName[x] }
if ((red$scientificName[x] %in% worms$scientificName)==T) {
# then add one to the counter, and add the species to the RedList only vector
counterc <- countera + 1
RyWn[counterc] <-red$scientificName[x]
}
}
both <- c()
for (x in 1:length(red$scientificName)) {
# if the red list species is not found on the  species list (i.e. match is False)
if ((red$scientificName[x] %in% worms$scientificName)==F) {
# then add one to the counter, and add the species to the RedList only vector
countera <- countera + 1
RyWn[countera] <-red$scientificName[x] }
if ((red$scientificName[x] %in% worms$scientificName)==T) {
# then add one to the counter, and add the species to the RedList only vector
counterc <- countera + 1
both[counterc] <-red$scientificName[x]
}
}
# and how many are in RL but not Worms & vice versa?
RyWn <- c()
RnWy <- c()
both <- c()
countera <- 0 # RESET IN BETWEEN EVERY RUN!
counterb <- 0
counterc <- 0
for (x in 1:length(red$scientificName)) {
# if the red list species is not found on the  species list (i.e. match is False)
if ((red$scientificName[x] %in% worms$scientificName)==F) {
# then add one to the counter, and add the species to the RedList only vector
countera <- countera + 1
RyWn[countera] <-red$scientificName[x] }
if ((red$scientificName[x] %in% worms$scientificName)==T) {
# then add one to the counter, and add the species to the RedList only vector
counterc <- counterc + 1
both[counterc] <-red$scientificName[x]
}
}
countera <- 0 # RESET IN BETWEEN EVERY RUN!
